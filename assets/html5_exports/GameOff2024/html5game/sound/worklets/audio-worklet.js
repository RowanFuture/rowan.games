AudioWorkletProcessor.prototype._x1=function(){this._y1=true;this.port.onmessage=(_z1)=>{if(_z1.data==="kill")this._y1=false;};};class _A1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._x1();}process(_B1,_C1,parameters){const input=_B1[0];const bypass=parameters.bypass;for(let c=0;c<input.length;++c){const _D1=input[c];for(let _E1=0;_E1<_D1.length;++_E1){const _F1=(bypass[_E1]!==undefined)?bypass[_E1]:bypass[0];
_C1[_F1][c][_E1]=_D1[_E1];}}return this._y1;}}class _G1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._x1();}process(_B1,_C1,parameters){const _H1=_B1[0];const _I1=_B1[1];const output=_C1[0];const gain=parameters.gain;for(let c=0;c<_I1.length;++c){const _D1=_I1[c];const _J1=output[c];for(let _E1=0;_E1<_D1.length;++_E1)_J1[_E1]=_D1[_E1];}for(let c=0;c<_H1.length;++c){const _D1=_H1[c];const _J1=output[c];
for(let _E1=0;_E1<_D1.length;++_E1){const _K1=(gain[_E1]!==undefined)?gain[_E1]:gain[0];_J1[_E1]+=_D1[_E1]*_K1;}}return this._y1;}}registerProcessor("audio-bus-input",_A1);registerProcessor("audio-bus-output",_G1);class _L1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100}
,{name:"resolution",automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _M1=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_N1){super();this._x1();const _O1=_N1.outputChannelCount[0];this._P1=new Float32Array(_O1);this._Q1=new Uint32Array(_O1);}process(_B1,_C1,parameters){const input=_B1[0];const output=_C1[0];const bypass=parameters.bypass;const gain=parameters.gain;
const factor=parameters.factor;const resolution=parameters.resolution;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _D1=input[c];const _J1=output[c];for(let _E1=0;_E1<_D1.length;++_E1){_J1[_E1]=_D1[_E1];if(this._Q1[c]===0)this._P1[c]=_D1[_E1];const _R1=(factor[_E1]!==undefined)?factor[_E1]:factor[0];++this._Q1[c];this._Q1[c]%=_R1;const _F1=(bypass[_E1]!==undefined)?bypass[_E1]:bypass[0];if(_F1>0.0){continue;}let _S1=this._P1[c];const _K1=(gain[_E1]!==undefined)?gain[_E1]:gain[0];_S1*=_K1;_S1=Math.max(Math.min(_S1,
1.0),-1.0);const _T1=(resolution[_E1]!==undefined)?resolution[_E1]:resolution[0];const max=(_S1>0.0)?_L1._M1[_T1]-1:_L1._M1[_T1];_S1=Math.round(_S1*max)/max;const _U1=(mix[_E1]!==undefined)?mix[_E1]:mix[0];_J1[_E1]*=(1.0-_U1);_J1[_E1]+=(_S1*_U1);}}return this._y1;}}registerProcessor("bitcrusher-processor",_L1);class _V1{constructor(_W1=1e-3){this.setTime(_W1);}setTime(_W1){this._X1=Math.exp(-1/(_W1*sampleRate));}process(_Y1,_Z1){return _Y1+this._X1*(_Z1-_Y1);}}class __1{constructor(_02,_12){this._22=new _V1(_02);
this._32=new _V1(_12);this._42=_02;this._52=_12;}_62(_W1){if(_W1===this._42)return;this._22.setTime(_W1);this._42=_W1;}_72(_W1){if(_W1===this._52)return;this._32.setTime(_W1);this._52=_W1;}process(_Y1,_Z1){if(_Y1>_Z1)return this._22.process(_Y1,_Z1);else return this._32.process(_Y1,_Z1);}}class _82 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0}
,{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",automationRate:"a-rate",defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_92){super();this._x1();const _22=_82.parameterDescriptors.find(_a2=>_a2.name==="attack");const _32=_82.parameterDescriptors.find(_a2=>_a2.name==="release");
this._b2=new __1(_22.defaultValue,_32.defaultValue);this._c2=0;}process(_d2,_e2,_f2){const input=_d2[0];const output=_e2[0];const bypass=_f2.bypass;const ingain=_f2.ingain;const outgain=_f2.outgain;const threshold=_f2.threshold;const ratio=_f2.ratio;const attack=_f2.attack;const release=_f2.release;if(input.length===0)return this._y1;for(let _E1=0;_E1<input[0].length;++_E1){let frame=input.map(_g2=>_g2[_E1]);output.forEach((_g2,_h2)=>{_g2[_E1]=frame[_h2];});const _i2=(ingain[_E1]!==undefined)?ingain[_E1]:ingain[0];
frame=frame.map(_j2=>_j2*=_i2);const rect=frame.map(_j2=>Math.abs(_j2));const max=Math.max(...rect);const _k2=_l2(max);const _m2=(threshold[_E1]!==undefined)?threshold[_E1]:threshold[0];const _n2=_l2(_m2);const _o2=Math.max(0,_k2-_n2);const _22=(attack[_E1]!==undefined)?attack[_E1]:attack[0];const _32=(release[_E1]!==undefined)?release[_E1]:release[0];this._b2._62(_22);this._b2._72(_32);this._c2=this._b2.process(_o2,this._c2);const _F1=(bypass[_E1]!==undefined)?bypass[_E1]:bypass[0];if(_F1>0)continue;const _T1=(ratio[_E1]!==undefined)?ratio[_E1]:ratio[0];
const _p2=(this._c2/_T1)-this._c2;const _K1=_q2(_p2);frame=frame.map(_j2=>_j2*=_K1);const _r2=(outgain[_E1]!==undefined)?outgain[_E1]:outgain[0];frame=frame.map(_j2=>_j2*=_r2);output.forEach((_g2,_h2)=>{_g2[_E1]=frame[_h2];});}return this._y1;}}function _l2(_s2){return 20*Math.log10(_s2);}function _q2(_s2){return Math.pow(10,_s2/20);}registerProcessor("compressor-processor",_82);class _t2 extends AudioWorkletProcessor{static _u2=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_t2._u2},{name:"feedback",automationRate:"a-rate",defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_N1){super();this._x1();const _O1=_N1.outputChannelCount[0];const _v2=(_t2._u2*sampleRate)+1;this.buffer=new Array(_O1);this._w2=new Uint32Array(_O1);for(let c=0;c<_O1;++c)this.buffer[c]=new Float32Array(_v2);
}process(_B1,_C1,parameters){const input=_B1[0];const output=_C1[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _D1=input[c];const _J1=output[c];for(let _E1=0;_E1<_D1.length;++_E1){_J1[_E1]=_D1[_E1];const _m2=(time[_E1]!==undefined)?time[_E1]:time[0];const _x2=this._y2(c,_m2);const _R1=(feedback[_E1]!==undefined)?feedback[_E1]:feedback[0];const _z2=_D1[_E1]+(_x2*_R1);this.write(c,_z2);const _F1=(bypass[_E1]!==undefined)?bypass[_E1]:bypass[0];
if(_F1>0.0){continue;}const _U1=(mix[_E1]!==undefined)?mix[_E1]:mix[0];_J1[_E1]*=(1-_U1);_J1[_E1]+=(_x2*_U1);}}return this._y1;}_y2(_A2,_W1){const _B2=_W1*sampleRate;let _C2=(this._w2[_A2]-~~_B2);let _D2=(_C2-1);while(_C2<0)_C2+=this.buffer[_A2].length;while(_D2<0)_D2+=this.buffer[_A2].length;const frac=_B2-~~_B2;const _E2=this.buffer[_A2][_C2];const _F2=this.buffer[_A2][_D2];return _E2+(_F2-_E2)*frac;}write(_A2,_G2){++this._w2[_A2];this._w2[_A2]%=this.buffer[_A2].length;this.buffer[_A2][this._w2[_A2]]=_G2;
}}registerProcessor("delay-processor",_t2);class _H2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];}constructor(){super();this._x1();}process(_I2,_J2,_K2){const input=_I2[0];const _L2=_J2[0];const _M2=_J2[1];for(let c=0;c<input.length;++c){const _D1=input[c];const _N2=_L2[c];const _O2=_M2[c];for(let _E1=0;_E1<_D1.length;++_E1){_N2[_E1]=_D1[_E1];_O2[_E1]=_D1[_E1];}}return this._y1;}}class _P2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._x1();}process(_I2,_J2,_K2){const _H1=_I2[0];const _I1=_I2[1];const output=_J2[0];const bypass=_K2.bypass;for(let c=0;c<_I1.length;++c){const _Q2=_H1[c];const _R2=_I1[c];const _J1=output[c];for(let _E1=0;_E1<_Q2.length;++_E1){const _F1=(bypass[_E1]!==undefined)?bypass[_E1]:bypass[0];if(_F1>0){_J1[_E1]=_R2[_E1];}else {_J1[_E1]=_Q2[_E1];}}}return this._y1;}}registerProcessor("eq-input",_H2);registerProcessor("eq-output",_P2);class _S2 extends AudioWorkletProcessor{
static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){super();this._x1();}process(_B1,_C1,parameters){const input=_B1[0];const output=_C1[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let c=0;c<input.length;++c){const _D1=input[c];const _J1=output[c];for(let _E1=0;_E1<_D1.length;++_E1){_J1[_E1]=_D1[_E1];const _F1=(bypass[_E1]!==undefined)?bypass[_E1]:bypass[0];
if(_F1>0.0){continue;}const _K1=(gain[_E1]!==undefined)?gain[_E1]:gain[0];_J1[_E1]*=_K1;}}return this._y1;}}registerProcessor("gain-processor",_S2);class _T2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _U2=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(5000.0,_U2),minValue:10.0,maxValue:_U2},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0}
,{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_N1){super();this._x1();const _O1=_N1.outputChannelCount[0];this._V2=0;this._W2=0;this._X2=0;this._Y2=0;this._Z2=0;this.__2=new Float32Array(_O1);this._03=new Float32Array(_O1);this._13=new Float32Array(_O1);this._23=new Float32Array(_O1);this._33=-1;this._43=-1;this._53=-1;}process(_B1,_C1,parameters){const input=_B1[0];const output=_C1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;
const _63=(freq.length===1&&q.length===1&&gain.length===1);if(_63)this._73(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _D1=input[c];const _J1=output[c];for(let _E1=0;_E1<_D1.length;++_E1){if(_63===false){const _R1=(freq[_E1]!==undefined)?freq[_E1]:freq[0];const _83=(q[_E1]!==undefined)?q[_E1]:q[0];const _K1=(gain[_E1]!==undefined)?gain[_E1]:gain[0];this._73(_R1,_83,_K1);}const _93=this._X2*_D1[_E1]+this._Y2*this.__2[c]+this._Z2*this._03[c]-this._V2*this._13[c]-this._W2*this._23[c];this._03[c]=this.__2[c];
this.__2[c]=_D1[_E1];this._23[c]=this._13[c];this._13[c]=_93;const _F1=(bypass[_E1]!==undefined)?bypass[_E1]:bypass[0];_J1[_E1]=(_F1>0)?_D1[_E1]:_93;}}return this._y1;}_73(_a3,_b3,_c3){if(_a3===this._33&&_b3===this._43&&_c3===this._53)return;const _d3=2*Math.PI*_a3/sampleRate;const _e3=Math.cos(_d3);const _f3=Math.sqrt(_c3);const _g3=_f3+1;const _h3=_f3-1;const _i3=_g3*_e3;const _j3=_h3*_e3;const _k3=_g3-_j3;const _l3=_g3+_j3;const alpha=Math.sin(_d3)/(2*_b3);const _m3=(2*Math.sqrt(_f3)*alpha);const _n3=_k3+_m3;
const _V2=2*(_h3-_i3);const _W2=_k3-_m3;const _X2=_f3*(_l3+_m3);const _Y2=-2*_f3*(_h3+_i3);const _Z2=_f3*(_l3-_m3);this._V2=_V2/_n3;this._W2=_W2/_n3;this._X2=_X2/_n3;this._Y2=_Y2/_n3;this._Z2=_Z2/_n3;this._33=_a3;this._43=_b3;this._53=_c3;}}registerProcessor("hi-shelf-processor",_T2);class _o3 extends AudioWorkletProcessor{static get parameterDescriptors(){const _p3=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,
_p3),minValue:10.0,maxValue:_p3},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_N1){super();this._x1();const _O1=_N1.outputChannelCount[0];this._V2=0;this._W2=0;this._X2=0;this._Y2=0;this._Z2=0;this.__2=new Float32Array(_O1);this._03=new Float32Array(_O1);this._13=new Float32Array(_O1);this._23=new Float32Array(_O1);this._q3=-1;this._43=-1;}process(_B1,_C1,parameters){const input=_B1[0];const output=_C1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;
const q=parameters.q;const _63=(cutoff.length===1&&q.length===1);if(_63)this._73(cutoff[0],q[0]);for(let c=0;c<input.length;++c){const _D1=input[c];const _J1=output[c];for(let _E1=0;_E1<_D1.length;++_E1){if(_63===false){const c=(cutoff[_E1]!==undefined)?cutoff[_E1]:cutoff[0];const _83=(q[_E1]!==undefined)?q[_E1]:q[0];this._73(c,_83);}const _93=this._X2*_D1[_E1]+this._Y2*this.__2[c]+this._Z2*this._03[c]-this._V2*this._13[c]-this._W2*this._23[c];this._03[c]=this.__2[c];this.__2[c]=_D1[_E1];this._23[c]=this._13[c];
this._13[c]=_93;const _F1=(bypass[_E1]!==undefined)?bypass[_E1]:bypass[0];_J1[_E1]=(_F1>0)?_D1[_E1]:_93;}}return this._y1;}_73(_r3,_b3){if(_r3===this._q3&&_b3===this._43)return;const _d3=2*Math.PI*_r3/sampleRate;const alpha=Math.sin(_d3)/(2*_b3);const _e3=Math.cos(_d3);const _n3=1+alpha;const _V2=-2*_e3;const _W2=1-alpha;const _X2=(1+_e3)/2;const _Y2=-1-_e3;const _Z2=(1+_e3)/2;this._V2=_V2/_n3;this._W2=_W2/_n3;this._X2=_X2/_n3;this._Y2=_Y2/_n3;this._Z2=_Z2/_n3;this._q3=_r3;this._43=_b3;}}registerProcessor("hpf2-processor",
_o3);class _s3 extends AudioWorkletProcessor{static get parameterDescriptors(){const _U2=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_U2),minValue:10.0,maxValue:_U2},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_N1){super();this._x1();const _O1=_N1.outputChannelCount[0];
this._V2=0;this._W2=0;this._X2=0;this._Y2=0;this._Z2=0;this.__2=new Float32Array(_O1);this._03=new Float32Array(_O1);this._13=new Float32Array(_O1);this._23=new Float32Array(_O1);this._33=-1;this._43=-1;this._53=-1;}process(_B1,_C1,parameters){const input=_B1[0];const output=_C1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _63=(freq.length===1&&q.length===1&&gain.length===1);if(_63)this._73(freq[0],q[0],gain[0]);for(let c=0;c<input.length;
++c){const _D1=input[c];const _J1=output[c];for(let _E1=0;_E1<_D1.length;++_E1){if(_63===false){const _R1=(freq[_E1]!==undefined)?freq[_E1]:freq[0];const _83=(q[_E1]!==undefined)?q[_E1]:q[0];const _K1=(gain[_E1]!==undefined)?gain[_E1]:gain[0];this._73(_R1,_83,_K1);}const _93=this._X2*_D1[_E1]+this._Y2*this.__2[c]+this._Z2*this._03[c]-this._V2*this._13[c]-this._W2*this._23[c];this._03[c]=this.__2[c];this.__2[c]=_D1[_E1];this._23[c]=this._13[c];this._13[c]=_93;const _F1=(bypass[_E1]!==undefined)?bypass[_E1]:bypass[0];
_J1[_E1]=(_F1>0)?_D1[_E1]:_93;}}return this._y1;}_73(_a3,_b3,_c3){if(_a3===this._33&&_b3===this._43&&_c3===this._53)return;const _d3=2*Math.PI*_a3/sampleRate;const _e3=Math.cos(_d3);const _f3=Math.sqrt(_c3);const _g3=_f3+1;const _h3=_f3-1;const _i3=_g3*_e3;const _j3=_h3*_e3;const _k3=_g3-_j3;const _l3=_g3+_j3;const alpha=Math.sin(_d3)/(2*_b3);const _m3=(2*Math.sqrt(_f3)*alpha);const _n3=_l3+_m3;const _V2=-2*(_h3+_i3);const _W2=_l3-_m3;const _X2=_f3*(_k3+_m3);const _Y2=2*_f3*(_h3-_i3);const _Z2=_f3*(_k3-_m3);this._V2=_V2/_n3;
this._W2=_W2/_n3;this._X2=_X2/_n3;this._Y2=_Y2/_n3;this._Z2=_Z2/_n3;this._33=_a3;this._43=_b3;this._53=_c3;}}registerProcessor("lo-shelf-processor",_s3);class _t3 extends AudioWorkletProcessor{static get parameterDescriptors(){const _p3=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_p3),minValue:10.0,maxValue:_p3},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}
];}constructor(_N1){super();this._x1();const _O1=_N1.outputChannelCount[0];this._V2=0;this._W2=0;this._X2=0;this._Y2=0;this._Z2=0;this.__2=new Float32Array(_O1);this._03=new Float32Array(_O1);this._13=new Float32Array(_O1);this._23=new Float32Array(_O1);this._q3=-1;this._43=-1;}process(_B1,_C1,parameters){const input=_B1[0];const output=_C1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _63=(cutoff.length===1&&q.length===1);if(_63)this._73(cutoff[0],q[0]);for(let c=0;
c<input.length;++c){const _D1=input[c];const _J1=output[c];for(let _E1=0;_E1<_D1.length;++_E1){if(_63===false){const c=(cutoff[_E1]!==undefined)?cutoff[_E1]:cutoff[0];const _83=(q[_E1]!==undefined)?q[_E1]:q[0];this._73(c,_83);}const _93=this._X2*_D1[_E1]+this._Y2*this.__2[c]+this._Z2*this._03[c]-this._V2*this._13[c]-this._W2*this._23[c];this._03[c]=this.__2[c];this.__2[c]=_D1[_E1];this._23[c]=this._13[c];this._13[c]=_93;const _F1=(bypass[_E1]!==undefined)?bypass[_E1]:bypass[0];_J1[_E1]=(_F1>0)?_D1[_E1]:_93;
}}return this._y1;}_73(_r3,_b3){if(_r3===this._q3&&_b3===this._43)return;const _d3=2*Math.PI*_r3/sampleRate;const alpha=Math.sin(_d3)/(2*_b3);const _e3=Math.cos(_d3);const _n3=1+alpha;const _V2=-2*_e3;const _W2=1-alpha;const _X2=(1-_e3)/2;const _Y2=1-_e3;const _Z2=(1-_e3)/2;this._V2=_V2/_n3;this._W2=_W2/_n3;this._X2=_X2/_n3;this._Y2=_Y2/_n3;this._Z2=_Z2/_n3;this._q3=_r3;this._43=_b3;}}registerProcessor("lpf2-processor",_t3);class _u3 extends AudioWorkletProcessor{static get parameterDescriptors(){const _U2=sampleRate*0.45;
return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_U2),minValue:10.0,maxValue:_U2},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_N1){super();this._x1();const _O1=_N1.outputChannelCount[0];this._V2=0;this._W2=0;this._X2=0;this._Y2=0;this._Z2=0;this.__2=new Float32Array(_O1);this._03=new Float32Array(_O1);
this._13=new Float32Array(_O1);this._23=new Float32Array(_O1);this._33=-1;this._43=-1;this._53=-1;}process(_B1,_C1,parameters){const input=_B1[0];const output=_C1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _63=(freq.length===1&&q.length===1&&gain.length===1);if(_63)this._73(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _D1=input[c];const _J1=output[c];for(let _E1=0;_E1<_D1.length;++_E1){if(_63===false){const _R1=(freq[_E1]!==undefined)?freq[_E1]:freq[0];
const _83=(q[_E1]!==undefined)?q[_E1]:q[0];const _K1=(gain[_E1]!==undefined)?gain[_E1]:gain[0];this._73(_R1,_83,_K1);}const _93=this._X2*_D1[_E1]+this._Y2*this.__2[c]+this._Z2*this._03[c]-this._V2*this._13[c]-this._W2*this._23[c];this._03[c]=this.__2[c];this.__2[c]=_D1[_E1];this._23[c]=this._13[c];this._13[c]=_93;const _F1=(bypass[_E1]!==undefined)?bypass[_E1]:bypass[0];_J1[_E1]=(_F1>0)?_D1[_E1]:_93;}}return this._y1;}_73(_a3,_b3,_c3){if(_a3===this._33&&_b3===this._43&&_c3===this._53)return;const _d3=2*Math.PI*_a3/sampleRate;
const _e3=Math.cos(_d3);const _f3=Math.sqrt(_c3);const alpha=Math.sin(_d3)/(2*_b3);const _v3=alpha/_f3;const _w3=alpha*_f3;const _n3=1+_v3;const _V2=-2*_e3;const _W2=1-_v3;const _X2=1+_w3;const _Y2=_V2;const _Z2=1-_w3;this._V2=_V2/_n3;this._W2=_W2/_n3;this._X2=_X2/_n3;this._Y2=_Y2/_n3;this._Z2=_Z2/_n3;this._33=_a3;this._43=_b3;this._53=_c3;}}registerProcessor("peak-eq-processor",_u3);class _x3{constructor(_y3){this._z3=0;this._A3=0;this.feedback=0;this._B3=0;this.buffer=new Float32Array(_y3);this._C3=0;}process(_G2){
const out=this.buffer[this._C3];this._B3=(this._B3*this._z3)+(out*this._A3);this.buffer[this._C3]=_G2+(this._B3*this.feedback);++this._C3;this._C3%=this.buffer.length;return out;}_D3(_E3){this.feedback=Math.min(Math.max(0,_E3),1);}_F3(_G3){this._z3=Math.min(Math.max(0,_G3),1);this._A3=1-this._z3;}}class _H3{constructor(_y3){this.feedback=0;this.buffer=new Float32Array(_y3);this._C3=0;}process(_G2){const out=this.buffer[this._C3];this.buffer[this._C3]=_G2+(out*this.feedback);++this._C3;this._C3%=this.buffer.length;
return(out-_G2);}_D3(_E3){this.feedback=Math.min(Math.max(0,_E3),1);}}class _I3 extends AudioWorkletProcessor{static _J3=8;static _K3=4;static _L3=0.015;static _M3=0.4;static _N3=0.28;static _O3=0.7;static _P3=[1116,1188,1277,1356,1422,1491,1557,1617];static _Q3=[1139,1211,1300,1379,1445,1514,1580,1640];static _R3=[556,441,341,225];static _S3=[579,464,364,248];static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",
defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_N1){super();this._x1();const _O1=_N1.outputChannelCount[0];this._T3=-1;this._U3=-1;this._V3=new Array(_O1);this._W3=new Array(_O1);const _X3=[_I3._P3,_I3._Q3];const _Y3=[_I3._R3,_I3._S3];for(let c=0;c<_O1;++c){this._V3[c]=new Array(_I3._J3);this._W3[c]=new Array(_I3._K3);for(let i=0;i<_I3._J3;
++i)this._V3[c][i]=new _x3(_X3[c%_X3.length][i]);for(let i=0;i<_I3._K3;++i)this._W3[c][i]=new _H3(_Y3[c%_Y3.length][i]);}this._Z3(0.5);this._F3(0.5);for(let c=0;c<_O1;++c)for(let i=0;i<_I3._K3;++i)this._W3[c][i]._D3(0.5);}process(_B1,_C1,parameters){const input=_B1[0];const output=_C1[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _D1=input[c];const _J1=output[c];for(let __3=0;__3<_D1.length;++__3){const _E1=(size[__3]!==undefined)?size[__3]:size[0];
const _04=(damp[__3]!==undefined)?damp[__3]:damp[0];this._Z3(_E1);this._F3(_04);_J1[__3]=_D1[__3];let out=0;const _S1=_D1[__3]*_I3._L3;for(let i=0;i<_I3._J3;++i)out+=this._V3[c][i].process(_S1);for(let i=0;i<_I3._K3;++i)out=this._W3[c][i].process(out);const _F1=(bypass[__3]!==undefined)?bypass[__3]:bypass[0];if(_F1>0.0){continue;}const _U1=(mix[__3]!==undefined)?mix[__3]:mix[0];_J1[__3]*=(1-_U1);_J1[__3]+=(out*_U1);}}return this._y1;}_Z3(_y3){if(_y3===this._T3)return;const size=(_y3*_I3._N3)+_I3._O3;for(let c=0;
c<this._V3.length;++c)for(let i=0;i<_I3._J3;++i)this._V3[c][i]._D3(size);this._T3=_y3;}_F3(_G3){if(_G3===this._U3)return;const damp=_G3*_I3._M3;for(let c=0;c<this._V3.length;++c)for(let i=0;i<_I3._J3;++i)this._V3[c][i]._F3(damp);this._U3=_G3;}}registerProcessor("reverb1-processor",_I3);class _14 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,minValue:0.0,
maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_N1){super();this._x1();const _O1=_N1.outputChannelCount[0];this._24=new Array(_O1).fill(1.0);this._34=new Array(_O1).fill(0.0);this._44=new Array(_O1).fill(_54._64._74);this._84=new Array(_O1);for(let c=0;c<_O1;++c){this._84[c]=new _94();
this._84[c]._a4(sampleRate);this._84[c]._b4(this._24[c]);this._84[c]._c4(this._44[c]);if(c%2===1){this._84[c]._d4(this._34[c]);}}}process(_B1,_C1,parameters){const input=_B1[0];const output=_C1[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let c=0;c<input.length;++c){const _D1=input[c];const _J1=output[c];for(let _E1=0;_E1<_D1.length;++_E1){_J1[_E1]=_D1[_E1];const _T1=(rate[_E1]!==undefined)?rate[_E1]:rate[0];
const _e4=(offset[_E1]!==undefined)?offset[_E1]:offset[0];const _f4=(shape[_E1]!==undefined)?shape[_E1]:shape[0];this._g4(c,_T1,_e4,_f4);const _h4=this._84[c]._y2();const _F1=(bypass[_E1]!==undefined)?bypass[_E1]:bypass[0];if(_F1>0.0){continue;}const i=(intensity[_E1]!==undefined)?intensity[_E1]:intensity[0];const out=_D1[_E1]*_h4*i;_J1[_E1]*=(1.0-i);_J1[_E1]+=out;}}return this._y1;}_g4(_A2,_i4,_j4,_k4){if(_i4!==this._24[_A2]){this._84[_A2]._b4(_i4);this._24[_A2]=_i4;}if(_j4!==this._34[_A2]){if(_A2%2===1){
this._84[_A2]._d4(_j4);}this._34[_A2]=_j4;}if(_k4!==this._44[_A2]){this._84[_A2]._c4(_k4);this._44[_A2]=_k4;}}}registerProcessor("tremolo-processor",_14);function _54(){}_54._64={_74:0,_l4:1,_m4:2,_n4:3,_o4:4,_p4:5};_54._q4=function(_r4){return 1.0-_r4;};_54._s4=function(_r4){return _r4;};_54._t4=function(_r4){return 0.5*(Math.sin((_r4*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_54._u4=function(_r4){if(_r4<0.5){return 0.0;}return 1.0;};_54._v4=function(_r4){if(_r4<0.5){return 2.0*_r4;}return 2.0-(2.0*_r4);};_54._w4=[_54._q4,
_54._s4,_54._t4,_54._u4,_54._v4];_x4._y4=512;_x4._z4=1.0/_x4._y4;function _x4(_A4){this.data=new Float32Array(_x4._y4);for(let i=0;i<_x4._y4;++i){this.data[i]=_A4(i*_x4._z4);}}_x4.prototype._y2=function(_r4){_r4=Math.max(0.0,_r4);_r4=Math.min(_r4,1.0);const _B4=_r4*_x4._y4;const _C4=~~_B4;const _D4=_B4-_C4;let _C2=_C4;let _D2=_C2+1;if(_C2>=_x4._y4){_C2-=_x4._y4;}if(_D2>=_x4._y4){_D2-=_x4._y4;}const _E2=this.data[_C2];const _F2=this.data[_D2];return _E2+(_F2-_E2)*_D4;};_94._E4=[];_94._F4=false;_94._G4=0.0;_94._U2=20.0;
function _94(){this._H4=48000;this.shape=_54._64._m4;this.freq=1.0;this._I4=0.0;this._z4=0.0;this._J4=0.0;if(_94._F4==true){return;}for(let i=0;i<_54._64._p4;++i){_94._E4[i]=new _x4(_54._w4[i]);}_94._F4=true;}_94._K4=function(){return(_94._F4==true);};_94.prototype._a4=function(_L4){this._H4=_L4;this._M4();};_94.prototype._b4=function(_a3){_a3=Math.max(_94._G4,_a3);_a3=Math.min(_a3,_94._U2);this.freq=_a3;this._M4();};_94.prototype._d4=function(_j4){_j4=Math.max(0.0,_j4);_j4=Math.min(_j4,1.0);const _N4=_j4-this._J4;
this._J4=_j4;this._I4+=_N4;while(this._I4>=1.0){this._I4-=1.0;}while(this._I4<0.0){this._I4+=1.0;}};_94.prototype._c4=function(_k4){_k4=Math.max(0,_k4);_k4=Math.min(_k4,_54._64._p4-1);this.shape=_k4;};_94.prototype._y2=function(){const result=_94._E4[this.shape]._y2(this._I4);this._I4+=this._z4;while(this._I4>=1.0){this._I4-=1.0;}return result;};_94.prototype._M4=function(){this._z4=this.freq/this._H4;};